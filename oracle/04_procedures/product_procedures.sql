-- =====================================================================
-- WinStore - Product Procedures (Oracle version)
-- =====================================================================
-- Description: Creates stored procedures for product management
-- Author:      WinStore Development Team
-- Created:     2025-05-25
-- Modified:    2025-10-02
-- Version:     1.0.0 (Oracle)
-- =====================================================================
-- Dependencies: 01_schema/01_core_schema.sql
-- =====================================================================

-- Create package for product related operations
CREATE OR REPLACE PACKAGE pkg_product AS
    -- Create Product
    PROCEDURE sp_CreateProduct(
        p_product_NAME IN VARCHAR2,
        p_product_DESC IN NVARCHAR2,
        p_product_PRICE IN NUMBER,
        p_product_CATEGORY_ID IN NUMBER,
        p_product_IMAGE IN VARCHAR2,
        p_product_STOCK IN NUMBER,
        p_product_ID OUT NUMBER
    );
    
    -- Update Product
    PROCEDURE sp_UpdateProduct(
        p_product_ID IN NUMBER,
        p_product_NAME IN VARCHAR2,
        p_product_DESC IN NVARCHAR2,
        p_product_PRICE IN NUMBER,
        p_product_CATEGORY_ID IN NUMBER,
        p_product_IMAGE IN VARCHAR2,
        p_product_STOCK IN NUMBER
    );
    
    -- Delete Product
    PROCEDURE sp_DeleteProduct(
        p_product_ID IN NUMBER
    );
    
    -- Get Product By ID
    PROCEDURE sp_GetProductByID(
        p_product_ID IN NUMBER,
        p_cursor OUT SYS_REFCURSOR
    );
    
    -- Search Products
    PROCEDURE sp_SearchProducts(
        p_search_TERM IN VARCHAR2,
        p_category_ID IN NUMBER DEFAULT NULL,
        p_min_PRICE IN NUMBER DEFAULT NULL,
        p_max_PRICE IN NUMBER DEFAULT NULL,
        p_page_NUMBER IN NUMBER DEFAULT 1,
        p_page_SIZE IN NUMBER DEFAULT 20,
        p_cursor OUT SYS_REFCURSOR
    );
END pkg_product;
/

-- Create package body for product related operations
CREATE OR REPLACE PACKAGE BODY pkg_product AS
    -- Create Product
    PROCEDURE sp_CreateProduct(
        p_product_NAME IN VARCHAR2,
        p_product_DESC IN NVARCHAR2,
        p_product_PRICE IN NUMBER,
        p_product_CATEGORY_ID IN NUMBER,
        p_product_IMAGE IN VARCHAR2,
        p_product_STOCK IN NUMBER,
        p_product_ID OUT NUMBER
    ) IS
    BEGIN
        -- Insert the product record and get the ID (generated by trigger)
        INSERT INTO Products (
            product_NAME,
            product_DESCRIPT,
            product_PRICE,
            category_ID,
            product_STOCK
        )
        VALUES (
            p_product_NAME,
            p_product_DESC,
            p_product_PRICE,
            p_product_CATEGORY_ID,
            p_product_STOCK
        )
        RETURNING product_ID INTO p_product_ID;
        
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END sp_CreateProduct;
    
    -- Update Product
    PROCEDURE sp_UpdateProduct(
        p_product_ID IN NUMBER,
        p_product_NAME IN VARCHAR2,
        p_product_DESC IN NVARCHAR2,
        p_product_PRICE IN NUMBER,
        p_product_CATEGORY_ID IN NUMBER,
        p_product_IMAGE IN VARCHAR2,
        p_product_STOCK IN NUMBER
    ) IS
    BEGIN
        UPDATE Products
        SET 
            product_NAME     = p_product_NAME,
            product_DESCRIPT = p_product_DESC,
            product_PRICE    = p_product_PRICE,
            category_ID      = p_product_CATEGORY_ID,
            product_STOCK    = p_product_STOCK,
            updated_at       = SYSDATE
        WHERE 
            product_ID = p_product_ID;
        
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END sp_UpdateProduct;
    
    -- Delete Product
    PROCEDURE sp_DeleteProduct(
        p_product_ID IN NUMBER
    ) IS
    BEGIN
        DELETE FROM Products
        WHERE product_ID = p_product_ID;
        
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END sp_DeleteProduct;
    
    -- Get Product By ID
    PROCEDURE sp_GetProductByID(
        p_product_ID IN NUMBER,
        p_cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
        OPEN p_cursor FOR
        SELECT 
            p.product_ID,
            p.product_NAME,
            p.product_DESCRIPT,
            p.product_PRICE,
            p.category_ID,
            c.category_NAME,
            p.product_STOCK,
            p.created_at,
            p.updated_at
        FROM 
            Products p
        JOIN 
            Categories c ON p.category_ID = c.category_ID
        WHERE 
            p.product_ID = p_product_ID;
            
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END sp_GetProductByID;
    
    -- Search Products
    PROCEDURE sp_SearchProducts(
        p_search_TERM IN VARCHAR2,
        p_category_ID IN NUMBER DEFAULT NULL,
        p_min_PRICE IN NUMBER DEFAULT NULL,
        p_max_PRICE IN NUMBER DEFAULT NULL,
        p_page_NUMBER IN NUMBER DEFAULT 1,
        p_page_SIZE IN NUMBER DEFAULT 20,
        p_cursor OUT SYS_REFCURSOR
    ) IS
        v_offset NUMBER := (p_page_NUMBER - 1) * p_page_SIZE;
    BEGIN
        OPEN p_cursor FOR
        SELECT * FROM (
            SELECT 
                p.product_ID,
                p.product_NAME,
                p.product_DESCRIPT,
                p.product_PRICE,
                p.category_ID,
                c.category_NAME,
                p.product_STOCK,
                p.created_at,
                p.updated_at,
                ROW_NUMBER() OVER (
                    ORDER BY 
                        CASE 
                            WHEN UPPER(p.product_NAME) LIKE '%' || UPPER(p_search_TERM) || '%' THEN 0 
                            ELSE 1 
                        END, 
                        p.product_NAME
                ) AS row_num
            FROM 
                Products p
            JOIN 
                Categories c ON p.category_ID = c.category_ID
            WHERE 
                (p_search_TERM IS NULL OR 
                 UPPER(p.product_NAME) LIKE '%' || UPPER(p_search_TERM) || '%' OR 
                 UPPER(p.product_DESCRIPT) LIKE '%' || UPPER(p_search_TERM) || '%')
                AND (p_category_ID IS NULL OR p.category_ID = p_category_ID)
                AND (p_min_PRICE IS NULL OR p.product_PRICE >= p_min_PRICE)
                AND (p_max_PRICE IS NULL OR p.product_PRICE <= p_max_PRICE)
        )
        WHERE row_num BETWEEN v_offset + 1 AND v_offset + p_page_SIZE;
        
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END sp_SearchProducts;
    
END pkg_product;
/

-- Grant execution privileges on the package
GRANT EXECUTE ON pkg_product TO WINSTORE_APP;

-- Provide feedback on creation
BEGIN
    DBMS_OUTPUT.PUT_LINE('Product procedures created successfully.');
END;
/
