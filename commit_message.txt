feat(data, docs): Внедрение генерации данных и единой документации

Этот коммит вносит два ключевых улучшения в проект, строго следуя философии "Абсурдно Идеального Кода" (AIC), и направлен на повышение надежности, простоты и воспроизводимости проекта.

### 1. Система Генерации Данных (Data Generation System)

Для решения проблемы "холодного старта" и обеспечения возможности тестирования с реалистичными данными, добавлена система генерации и парсинга данных.

*   **Реализация:**
    *   Добавлены скрипты в `scripts/data_generation/` для автоматического заполнения базовых сущностей (производители, категории) и генерации товарных позиций (CPU, GPU).
    *   Реализован раздельный подход к генерации GPU NVIDIA (`generate_gpu_nvidia.py` для GTX/RTX и `generate_gpu_nvidia_gt.py` для GT), что соответствует принципу простоты и надежности (см. `docs/adrs/ADR-2025-10-19-nvidia-generators-separation.md`).
    *   В `backend/requirements.txt` добавлены зависимости `requests`, `beautifulsoup4` и `Faker` для поддержки парсинга и генерации.

*   **Обоснование (AIC):**
    *   **Надежность:** Позволяет быстро наполнять БД консистентными и валидными данными, что критически важно для тестирования.
    *   **Простота:** Автоматизирует ручной процесс, упрощая настройку окружения для новых разработчиков.

### 2. Единая Система Документации (AIC Documentation Guide)

Для устранения фрагментации и дублирования информации создана единая точка входа в документацию проекта.

*   **Реализация:**
    *   Создана директория `docs/aic_guide/`, содержащая высокоуровневое руководство по архитектуре, философии БД, бизнес-процессам и процессу разработки.
    *   Документация написана на русском языке и служит "картой", связывающей воедино все существующие документы (`README`, ADR, гайдлайны).

*   **Обоснование (AIC):**
    *   **Простота и Читаемость:** Предоставляет новым и текущим участникам проекта ясную и структурированную картину, снижая когнитивную нагрузку.
    *   **Надежность:** Уменьшает риск возникновения разночтений и устаревания информации, так как ссылается на первоисточники.

### 3. Улучшения Инфраструктуры и БД

*   **Docker:** В `docker-compose.yml` профили `mssql` и `oracle` объединены в единый профиль `app` для упрощения запуска.
*   **Ожидание БД:** Скрипт `backend/wait_for_db.py` был полностью переработан для надежной поддержки как MSSQL, так и Oracle.
*   **Oracle:**
    *   Улучшены скрипты развертывания (`deploy.sql`) и сброса (`reset.sql`), добавлено принудительное завершение активных сессий для надежности.
    *   Добавлены новые диагностические представления (`view_product_full_details`) для упрощения отладки и анализа данных по конкретному продукту.
*   **Зависимости:** Обновлена библиотека `Pillow` до версии 12.0.0.
